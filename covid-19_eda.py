# -*- coding: utf-8 -*-
"""COVID19_EDA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zHdUQqbNJjcJVuBBRu5knlxi5cKhfysw

Create the environment
"""

!sudo apt-get install python3-dev default-libmysqlclient-dev
!pip install pymysql

"""Import the libraries"""

import pandas as pd
import matplotlib.pyplot as plt
import plotly.express as px
import numpy as np
import seaborn as sns
import sqlalchemy as sqlalchemy
from sqlalchemy import create_engine

"""## Exploring the Data

Query HealthData.gov for the .csv file of COVID19 cases and deaths by state over time
"""

covid19 = pd.read_csv("https://data.cdc.gov/resource/9mfq-cb36.csv")
covid19

"""#### Something is wrong with their API because we should be pulling in 15k 
#### records but we see there is only 1,000 here.
#### Instead, let download the data as a .csv and then upload the data into a database so there will be no issues
"""

MYSQL_HOSTNAME = 'ahi.c96anxcynoyv.us-east-1.rds.amazonaws.com' 
MYSQL_USER = 'admin'
MYSQL_PASSWORD = '46****56'
MYSQL_DATABASE = 'chris_v'

connection_string = f'mysql+pymysql://{MYSQL_USER}:{MYSQL_PASSWORD}@{MYSQL_HOSTNAME}/{MYSQL_DATABASE}'
engine = create_engine(connection_string)

### Lets see what databases are in there right now

engine = create_engine(connection_string)
insp = sqlalchemy.inspect(engine)
db_list = insp.get_schema_names()
db_list

### Create a new database for us to use
engine.execute("CREATE DATABASE chris_v")

### Confirm we have our new database
insp = sqlalchemy.inspect(engine)
db_list = insp.get_schema_names()
db_list

### Now we can create a new table inside chris_v to upload COVID19 data that I posted on github

MYSQL_DATABASE = 'chris_v'
connection_string = f'mysql+pymysql://{MYSQL_USER}:{MYSQL_PASSWORD}@{MYSQL_HOSTNAME}/{MYSQL_DATABASE}'
engine = create_engine(connection_string)

covid19 = pd.read_csv('https://raw.githubusercontent.com/chrisvidetto1/Exploratory_Data_Analysis/master/US_COVID-19_Cases_and_Deaths_over_Time.csv')
covid19.to_sql('covid19', con=engine, if_exists='append')

### Check the list of tables in database chris_v
chris_v_table_list = engine.table_names()
chris_v_table_list

### Confirm the data is uploaded properly by looking at a sample of our table as a new df within pandas 
mysqlcovid19sample = pd.read_sql("SELECT * FROM covid19 ORDER BY RAND() LIMIT 10;", con=engine)
mysqlcovid19sample

### It worked!! Now lets take everything and place it into a new dataframe 
### so we can perform a statistical analysis of this

dfcovid19 = pd.read_sql("SELECT * FROM covid19;", con=engine)

dfcovid19 = pd.read_csv('https://raw.githubusercontent.com/chrisvidetto1/Exploratory_Data_Analysis/master/US_COVID-19_Cases_and_Deaths_over_Time.csv')

dfcovid19

## Lets just do some data cleaning tasks and change the data type 
dfcovid19['submission_date'] = pd.to_datetime(dfcovid19['submission_date'])

### We also see that we need to reset the index
dfcovid19.reset_index(drop=True, inplace=True)
dfcovid19_clean = dfcovid19.drop(columns= 'index')

### Check that the date/time transformation worked
dfcovid19.dtypes

dfcovid19.sample(6)

dfcovid19.dtypes

dfcovid19_clean.head()

# Reformatting for Simpler Graphs?????
temp = px.bar(mysqlcovid, x="submission_date", y=["new_case"], title="New Cases Per Day")
temp.update_layout(yaxis=dict(range=[0,10000]))
plot(temp)

### Take a look at the Total Number of Covid19 Cases
temp = px.bar(dfcovid19, x="submission_date", y="tot_cases", title="Total Cases")
temp.update_layout(yaxis=dict(range=[0,7000000]))
temp

### Lets break this Total cases into two variables, new cases and new deaths.
### Here is the first feature of interest "new_case"

temp = px.bar(dfcovid19, x="submission_date", y="new_case", title="New Cases Per Day", color='new_case', color_continuous_scale=px.colors.sequential.Inferno)
temp.update_layout(yaxis=dict(range=[0,80000]))
temp

temp2 = px.bar(dfcovid19, x="submission_date", y="new_death", title="New Deaths Per Day", color='new_death', color_continuous_scale=px.colors.sequential.Viridis )
temp2.update_layout(yaxis=dict(range=[0,5000]))

temp2

### There seems to be a relationship between the number of new cases and
### the number of new deaths because based on the graphs we can see that
### an increase in one variable corresponds to an increase in the other.
### Lets investigate thi relationship statistically...

dfcovid19.new_case.describe()

dfcovid19.new_death.describe()

### To perform a full statistical analysis we should focus on one location
### Lets choose NYC

nyc = dfcovid19[dfcovid19['state'] == "NYC"]
nyc.sample(5)

nyc.dtypes

nyctemp = px.bar(nyc, x="submission_date", y="new_case", title="New Cases Per Day")
nyctemp.update_layout(yaxis=dict(range=[0,10000]))
nyctemp

nyctemp = px.bar(nyc, x="submission_date", y="new_death", title="New Deaths Per Day")
nyctemp.update_layout(yaxis=dict(range=[0,4600]))
nyctemp

import matplotlib.pyplot as plt
plt.plot(nyc.submission_date, nyc.new_case, color='tab:blue', label='New Cases')
plt.plot(nyc.submission_date, nyc.new_death, color='tab:green', label='New Deaths')
plt.ylim([0,10000])

plt.plot( 'submission_date', 'new_case', data=nyc, marker='o', markerfacecolor='blue', markersize=5, color='skyblue', linewidth=1)
plt.plot( 'submission_date', 'new_death', data=nyc, marker='o', markerfacecolor='green', markersize=5, color='lightgreen', linewidth=1)
plt.legend()
plt.xticks(rotation=90)
plt.ylim([0,10000])

print('mean=%.3f stdv=%.3f' % (np.mean(nyc.new_case), np.std(nyc.new_case)))
print('mean=%.3f stdv=%.3f' % (np.mean(nyc.new_death), np.std(nyc.new_death)))

ax = sns.boxplot(x = nyc.new_death)
ax = sns.boxplot(x = nyc.new_death).set(xlim=(-50, 300))

ax = sns.boxplot(x = nyc.new_case)
ax = sns.boxplot(x = nyc.new_case).set(xlim=(-200, 3000))

### Based on thse visualizations the data does NOT look like a normal distribution
### However, we need to perform a normality test to confirm
### The D’Agostino’s K^2 test calculates summary statistics from the data, 
### namely kurtosis and skewness, to determine if the data distribution departs 
### from the normal distributio

from scipy.stats import normaltest

stat, p = normaltest(nyc.new_case)
print('Statistics=%.3f, p=%.3f' % (stat, p))
# interpret
alpha = 0.05
if p > alpha:
	print('Sample looks Gaussian (fail to reject H0)')
else:
	print('Sample does not look Gaussian (reject H0)')

### Now we have proven that our data is NOT normally distributed.
### The next step is to perform a correlation between our variable, so
### we must use a test that is for NON-GAUSSIAN data
### Therefore, we must use a Spearman correlation test (not a Pearson!)

from scipy.stats import spearmanr
corr, _ = spearmanr(nyc.new_case, nyc.new_death)
print('Spearmans correlation: %.3f' % corr)

### Size of Correlation	Interpretation
### https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3576830/
### .90 to 1.00 -->	Very high positive (negative) correlation
### .70 to .90 -->	High positive (negative) correlation
### .50 to .70 -->	Moderate positive (negative) correlation
### .30 to .50 -->	Low positive (negative) correlation
### .00 to .30 -->	negligible correlation

"""### According to the calculated Spearman correlation coefficient of 0.860
### there is a high positive correlation between the quantity of new cases,
### and the new deaths in NYC related to COVID19.

### Thanks for reading :)
### -CV
"""